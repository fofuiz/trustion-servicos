#!/usr/bin/env groovy

import groovy.transform.Field

node {
    CheckoutProject()
    PipelineBrinksModel()
    OWASPDependencyCheck()
    OWASPReportCheck()
    MVNBuild()
    DockerSetup()
}

def PipelineBrinksModel() {

    stage ("Pipeline Brinks Model") {
            build(
            job: "DEV-brinks-model_BUILD"
            )
    }
}


def OWASPDependencyCheck() {
    stage ("OWASP Dependency Check") {
        dependencyCheckAnalyzer datadir: '/var/lib/jenkins/OWASP-dependency-check', 
        hintsFile: '', includeCsvReports: false, includeHtmlReports: false, includeJsonReports: false, 
        includeVulnReports: false, isAutoupdateDisabled: true, outdir: '/var/lib/jenkins/workspace/brinks/DEV-brinks-portal_BUILD',
        scanpath: '/var/lib/jenkins/workspace/brinks/DEV-brinks-portal_BUILD', skipOnScmChange: false, skipOnUpstreamChange: false,
        suppressionFile: '', zipExtensions: ''
    }
}

def OWASPReportCheck() {
    stage ("OWASP Report Check") {
        dependencyCheckPublisher canComputeNew: false, defaultEncoding: '', shouldDetectModules: true,
        failedTotalAll: '1', failedTotalHigh: '1', failedTotalLow: '1', failedTotalNormal: '1', healthy: '', 
        pattern: '**/dependency-check-report.xml', unHealthy: ''
    }
}

def CheckoutProject() {
   def branch = "develop"
   //def branch = "kaspper_sprint_01"

   stage ("Checkout Project") {
        checkout([$class: 'GitSCM', branches: [[name: '*/'+ branch]], 
       doGenerateSubmoduleConfigurations: false,  
       userRemoteConfigs: [[credentialsId: '38a55a99-1704-4c13-b637-16ec64887274',
           url: 'http://jenkins@gitlab.accesstage.com.br/desenvolvimento-projetos/demanda-projetos/brinks-portal.git']]])
   }
}

def MVNBuild() {
   def profile = "develop"
   stage ("Maven Build") {
       //Builda a aplicacao com o profile definido
       sh 'export DOCKER_HOST=tcp://127.0.0.1:2375; mvn clean install -P '+ profile

       
    }   
}

def DockerSetup(){
    def env = "dev"
    def image_name = "brinks-portal"
    def proxy = "http://192.168.42.243:3128"

    stage ("Docker Setup") {
        //Cria o container utilizando o Dockerfile;
       sh 'docker build -t registry-prd1.accesstage.com.br/'+ image_name +':'+ env +'-$BUILD_NUMBER --build-arg HTTP_PROXY='+ proxy +' --build-arg HTTPS_PROXY='+ proxy +' -f deploy-dev/Dockerfile .'

       //Faz push da imagem buildada par ao Registry da Accesstage
       sh 'docker push registry-prd1.accesstage.com.br/'+ image_name +':'+ env +'-$BUILD_NUMBER'

        }
    }
